// Package os implements os interface for anko script.
package os

import (
	pkg "os"
	"reflect"

	"github.com/mattn/anko/vm"
)

func Import(env *vm.Env) *vm.Env {
	m := env.NewPackage("os")
	m.Define("Args", pkg.Args)
	m.Define("Chdir", pkg.Chdir)
	m.Define("Chmod", pkg.Chmod)
	m.Define("Chown", pkg.Chown)
	m.Define("Chtimes", pkg.Chtimes)
	m.Define("Clearenv", pkg.Clearenv)
	m.Define("Create", pkg.Create)
	m.Define("DevNull", pkg.DevNull)
	m.Define("Environ", pkg.Environ)
	m.Define("ErrExist", pkg.ErrExist)
	m.Define("ErrInvalid", pkg.ErrInvalid)
	m.Define("ErrNotExist", pkg.ErrNotExist)
	m.Define("ErrPermission", pkg.ErrPermission)
	m.Define("Exit", pkg.Exit)
	m.Define("Expand", pkg.Expand)
	m.Define("ExpandEnv", pkg.ExpandEnv)
	m.Define("FindProcess", pkg.FindProcess)
	m.Define("Getegid", pkg.Getegid)
	m.Define("Getenv", pkg.Getenv)
	m.Define("Geteuid", pkg.Geteuid)
	m.Define("Getgid", pkg.Getgid)
	m.Define("Getgroups", pkg.Getgroups)
	m.Define("Getpagesize", pkg.Getpagesize)
	m.Define("Getpid", pkg.Getpid)
	handleAppEngine(m)
	m.Define("Getuid", pkg.Getuid)
	m.Define("Getwd", pkg.Getwd)
	m.Define("Hostname", pkg.Hostname)
	m.Define("Interrupt", pkg.Interrupt)
	m.Define("IsExist", pkg.IsExist)
	m.Define("IsNotExist", pkg.IsNotExist)
	m.Define("IsPathSeparator", pkg.IsPathSeparator)
	m.Define("IsPermission", pkg.IsPermission)
	m.Define("Kill", pkg.Kill)
	m.Define("Lchown", pkg.Lchown)
	m.Define("Link", pkg.Link)
	m.Define("Lstat", pkg.Lstat)
	m.Define("Mkdir", pkg.Mkdir)
	m.Define("MkdirAll", pkg.MkdirAll)
	m.Define("ModeAppend", pkg.ModeAppend)
	m.Define("ModeCharDevice", pkg.ModeCharDevice)
	m.Define("ModeDevice", pkg.ModeDevice)
	m.Define("ModeDir", pkg.ModeDir)
	m.Define("ModeExclusive", pkg.ModeExclusive)
	m.Define("ModeNamedPipe", pkg.ModeNamedPipe)
	m.Define("ModePerm", pkg.ModePerm)
	m.Define("ModeSetgid", pkg.ModeSetgid)
	m.Define("ModeSetuid", pkg.ModeSetuid)
	m.Define("ModeSocket", pkg.ModeSocket)
	m.Define("ModeSticky", pkg.ModeSticky)
	m.Define("ModeSymlink", pkg.ModeSymlink)
	m.Define("ModeTemporary", pkg.ModeTemporary)
	m.Define("ModeType", pkg.ModeType)
	m.Define("NewFile", pkg.NewFile)
	m.Define("NewSyscallError", pkg.NewSyscallError)
	m.Define("O_APPEND", pkg.O_APPEND)
	m.Define("O_CREATE", pkg.O_CREATE)
	m.Define("O_EXCL", pkg.O_EXCL)
	m.Define("O_RDONLY", pkg.O_RDONLY)
	m.Define("O_RDWR", pkg.O_RDWR)
	m.Define("O_SYNC", pkg.O_SYNC)
	m.Define("O_TRUNC", pkg.O_TRUNC)
	m.Define("O_WRONLY", pkg.O_WRONLY)
	m.Define("Open", pkg.Open)
	m.Define("OpenFile", pkg.OpenFile)
	m.Define("PathListSeparator", pkg.PathListSeparator)
	m.Define("PathSeparator", pkg.PathSeparator)
	m.Define("Pipe", pkg.Pipe)
	m.Define("Readlink", pkg.Readlink)
	m.Define("Remove", pkg.Remove)
	m.Define("RemoveAll", pkg.RemoveAll)
	m.Define("Rename", pkg.Rename)
	m.Define("SEEK_CUR", pkg.SEEK_CUR)
	m.Define("SEEK_END", pkg.SEEK_END)
	m.Define("SEEK_SET", pkg.SEEK_SET)
	m.Define("SameFile", pkg.SameFile)
	m.Define("Setenv", pkg.Setenv)
	m.Define("StartProcess", pkg.StartProcess)
	m.Define("Stat", pkg.Stat)
	m.Define("Stderr", pkg.Stderr)
	m.Define("Stdin", pkg.Stdin)
	m.Define("Stdout", pkg.Stdout)
	m.Define("Symlink", pkg.Symlink)
	m.Define("TempDir", pkg.TempDir)
	m.Define("Truncate", pkg.Truncate)

	var v pkg.Signal
	m.DefineType("Signal", reflect.TypeOf(&v).Elem())
	return m
}
