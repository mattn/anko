// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/mattn/anko/ast"
)

//line parser.go.y:40
type yySymType struct {
	yys                 int
	compstmt            ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	exprs               []ast.Expr
	expr                ast.Expr
	map_expr            map[ast.Expr]ast.Expr
	expr_idents         []string
	expr_literals       ast.Expr
	expr_type           string
	tok                 ast.Token
	array_count         ast.ArrayCount
	expr_slice          ast.Expr
	expr_ident          ast.Expr
	expr_op             ast.Expr
	expr_unary          ast.Expr
	expr_binary         ast.Expr
	expr_lets           ast.Expr
	op_binary           ast.Operator
	op_comparison       ast.Operator
	op_add              ast.Operator
	op_multiply         ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const CASE = 57388
const DEFAULT = 57389
const GO = 57390
const CHAN = 57391
const MAKE = 57392
const OPCHAN = 57393
const TYPE = 57394
const LEN = 57395
const DELETE = 57396
const UNARY = 57397

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'['",
	"']'",
	"','",
	"'.'",
	"'!'",
	"'\\n'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:945

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	55, 69,
	73, 5,
	76, 69,
	-2, 1,
	-1, 21,
	76, 70,
	-2, 23,
	-1, 25,
	55, 69,
	-2, 58,
	-1, 61,
	55, 69,
	76, 69,
	-2, 5,
	-1, 112,
	16, 59,
	76, 59,
	-2, 106,
	-1, 134,
	1, 118,
	8, 118,
	46, 118,
	47, 118,
	55, 118,
	56, 118,
	69, 118,
	70, 118,
	72, 118,
	73, 118,
	75, 118,
	76, 118,
	79, 118,
	-2, 73,
	-1, 136,
	1, 120,
	8, 120,
	46, 120,
	47, 120,
	55, 120,
	56, 120,
	69, 120,
	70, 120,
	72, 120,
	73, 120,
	75, 120,
	76, 120,
	79, 120,
	-2, 73,
	-1, 239,
	75, 165,
	-2, 157,
	-1, 242,
	70, 165,
	-2, 157,
	-1, 259,
	1, 72,
	8, 72,
	46, 72,
	47, 72,
	55, 72,
	56, 72,
	70, 72,
	72, 72,
	73, 72,
	75, 72,
	76, 72,
	79, 72,
	-2, 73,
	-1, 260,
	1, 119,
	8, 119,
	46, 119,
	47, 119,
	55, 119,
	56, 119,
	69, 119,
	70, 119,
	72, 119,
	73, 119,
	75, 119,
	76, 119,
	79, 119,
	-2, 77,
	-1, 261,
	1, 121,
	8, 121,
	46, 121,
	47, 121,
	55, 121,
	56, 121,
	69, 121,
	70, 121,
	72, 121,
	73, 121,
	75, 121,
	76, 121,
	79, 121,
	-2, 77,
	-1, 267,
	1, 20,
	46, 20,
	47, 20,
	70, 20,
	73, 20,
	79, 20,
	-2, 86,
	-1, 269,
	1, 22,
	46, 22,
	47, 22,
	70, 22,
	73, 22,
	79, 22,
	-2, 88,
	-1, 298,
	70, 163,
	75, 163,
	-2, 158,
	-1, 315,
	1, 19,
	46, 19,
	47, 19,
	70, 19,
	73, 19,
	79, 19,
	-2, 85,
	-1, 316,
	1, 21,
	46, 21,
	47, 21,
	70, 21,
	73, 21,
	79, 21,
	-2, 87,
}

const yyPrivate = 57344

const yyLast = 3432

var yyAct = [...]int{

	65, 287, 288, 21, 240, 27, 5, 7, 198, 108,
	242, 6, 8, 8, 63, 66, 239, 62, 8, 8,
	357, 71, 130, 310, 249, 106, 109, 113, 119, 248,
	307, 42, 308, 120, 290, 289, 309, 248, 200, 125,
	130, 202, 118, 118, 1, 64, 78, 205, 297, 268,
	299, 127, 131, 132, 133, 135, 137, 129, 181, 117,
	134, 136, 21, 203, 199, 254, 77, 8, 182, 73,
	63, 266, 76, 145, 146, 148, 149, 305, 130, 152,
	153, 306, 248, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 114, 79, 151,
	245, 185, 296, 269, 142, 188, 182, 130, 182, 180,
	194, 186, 337, 197, 316, 190, 63, 204, 237, 220,
	315, 303, 80, 81, 251, 267, 295, 274, 191, 130,
	116, 211, 118, 78, 121, 143, 126, 124, 218, 192,
	123, 122, 179, 196, 391, 390, 383, 382, 380, 207,
	376, 206, 313, 77, 375, 371, 73, 370, 369, 76,
	368, 358, 330, 354, 246, 214, 215, 350, 130, 348,
	347, 346, 224, 343, 210, 228, 212, 231, 63, 319,
	235, 140, 236, 221, 118, 301, 182, 130, 243, 118,
	278, 238, 275, 264, 241, 241, 387, 115, 258, 250,
	252, 225, 262, 259, 223, 213, 232, 270, 386, 361,
	273, 344, 336, 222, 335, 294, 139, 314, 226, 69,
	282, 284, 9, 385, 291, 290, 289, 257, 381, 180,
	265, 10, 68, 304, 277, 302, 261, 141, 260, 63,
	253, 298, 199, 128, 298, 150, 67, 311, 4, 2,
	56, 57, 61, 60, 58, 59, 50, 111, 207, 49,
	48, 300, 279, 40, 34, 201, 28, 193, 286, 19,
	17, 16, 23, 22, 3, 0, 326, 0, 329, 328,
	0, 331, 79, 180, 138, 180, 0, 0, 118, 0,
	0, 338, 0, 0, 0, 0, 63, 339, 312, 0,
	340, 341, 0, 0, 0, 327, 80, 81, 105, 102,
	103, 318, 332, 0, 0, 320, 321, 78, 323, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 334,
	99, 100, 101, 104, 0, 0, 0, 77, 0, 0,
	73, 0, 0, 76, 0, 0, 0, 0, 0, 345,
	0, 0, 0, 378, 0, 0, 379, 349, 0, 351,
	352, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	359, 360, 0, 0, 0, 0, 0, 0, 0, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 372, 0,
	0, 373, 374, 0, 0, 0, 377, 0, 0, 79,
	90, 91, 95, 93, 89, 88, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 82, 83, 85, 86, 87,
	84, 388, 389, 80, 81, 105, 102, 103, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	74, 92, 94, 96, 97, 98, 0, 99, 100, 101,
	104, 0, 0, 0, 77, 364, 0, 73, 0, 365,
	76, 79, 90, 91, 95, 93, 89, 88, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 82, 83, 85,
	86, 87, 84, 0, 0, 80, 81, 105, 102, 103,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 74, 92, 94, 96, 97, 98, 0, 99,
	100, 101, 104, 0, 0, 0, 77, 255, 0, 73,
	0, 256, 76, 79, 90, 91, 95, 93, 89, 88,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 82,
	83, 85, 86, 87, 84, 0, 0, 80, 81, 105,
	102, 103, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 233, 74, 92, 94, 96, 97, 98,
	0, 99, 100, 101, 104, 0, 0, 0, 77, 0,
	0, 73, 234, 0, 76, 79, 90, 91, 95, 93,
	89, 88, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 82, 83, 85, 86, 87, 84, 0, 0, 80,
	81, 105, 102, 103, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 216, 74, 92, 94, 96,
	97, 98, 0, 99, 100, 101, 104, 0, 0, 0,
	77, 0, 0, 73, 217, 0, 76, 79, 90, 91,
	95, 93, 89, 88, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 82, 83, 85, 86, 87, 84, 0,
	0, 80, 81, 105, 102, 103, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 72, 0, 74, 92,
	94, 96, 97, 98, 0, 99, 100, 101, 104, 0,
	183, 0, 77, 0, 0, 73, 0, 0, 76, 79,
	90, 91, 95, 93, 89, 88, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 82, 83, 85, 86, 87,
	84, 0, 0, 80, 81, 105, 102, 103, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	74, 92, 94, 96, 97, 98, 0, 99, 100, 101,
	104, 0, 0, 0, 77, 384, 0, 73, 0, 0,
	76, 79, 90, 91, 95, 93, 89, 88, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 82, 83, 85,
	86, 87, 84, 0, 0, 80, 81, 105, 102, 103,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 74, 92, 94, 96, 97, 98, 0, 99,
	100, 101, 104, 0, 0, 0, 77, 366, 0, 73,
	0, 0, 76, 79, 90, 91, 95, 93, 89, 88,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 82,
	83, 85, 86, 87, 84, 0, 0, 80, 81, 105,
	102, 103, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 74, 92, 94, 96, 97, 98,
	0, 99, 100, 101, 104, 0, 0, 0, 77, 363,
	0, 73, 0, 0, 76, 79, 90, 91, 95, 93,
	89, 88, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 82, 83, 85, 86, 87, 84, 0, 0, 80,
	81, 105, 102, 103, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 362, 74, 92, 94, 96,
	97, 98, 0, 99, 100, 101, 104, 0, 0, 0,
	77, 0, 0, 73, 0, 0, 76, 79, 90, 91,
	95, 93, 89, 88, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 82, 83, 85, 86, 87, 84, 0,
	0, 80, 81, 105, 102, 103, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 356, 74, 92,
	94, 96, 97, 98, 0, 99, 100, 101, 104, 0,
	0, 0, 77, 0, 0, 73, 0, 0, 76, 79,
	90, 91, 95, 93, 89, 88, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 82, 83, 85, 86, 87,
	84, 0, 0, 80, 81, 105, 102, 103, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	74, 92, 94, 96, 97, 98, 0, 99, 100, 101,
	104, 0, 353, 0, 77, 0, 0, 73, 0, 0,
	76, 79, 90, 91, 95, 93, 89, 88, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 82, 83, 85,
	86, 87, 84, 0, 0, 80, 81, 105, 102, 103,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 74, 92, 94, 96, 97, 98, 0, 99,
	100, 101, 104, 0, 0, 0, 77, 342, 0, 73,
	0, 0, 76, 79, 90, 91, 95, 93, 89, 88,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 82,
	83, 85, 86, 87, 84, 0, 0, 80, 81, 105,
	102, 103, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 74, 92, 94, 96, 97, 98,
	0, 99, 100, 101, 104, 0, 0, 0, 77, 0,
	0, 73, 333, 0, 76, 79, 90, 91, 95, 93,
	89, 88, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 82, 83, 85, 86, 87, 84, 0, 0, 80,
	81, 105, 102, 103, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 74, 92, 94, 96,
	97, 98, 0, 99, 100, 101, 104, 0, 324, 0,
	77, 0, 0, 73, 0, 0, 76, 79, 90, 91,
	95, 93, 89, 88, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 82, 83, 85, 86, 87, 84, 0,
	0, 80, 81, 105, 102, 103, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 74, 92,
	94, 96, 97, 98, 0, 99, 100, 101, 104, 0,
	322, 0, 77, 0, 0, 73, 0, 0, 76, 79,
	90, 91, 95, 93, 89, 88, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 82, 83, 85, 86, 87,
	84, 0, 0, 80, 81, 105, 102, 103, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	74, 92, 94, 96, 97, 98, 0, 99, 100, 101,
	104, 0, 0, 0, 77, 0, 0, 73, 317, 0,
	76, 79, 90, 91, 95, 93, 89, 88, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 82, 83, 85,
	86, 87, 84, 0, 0, 80, 81, 105, 102, 103,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 74, 92, 94, 96, 97, 98, 0, 99,
	100, 101, 104, 0, 0, 0, 77, 0, 0, 73,
	293, 0, 76, 79, 90, 91, 95, 93, 89, 88,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 82,
	83, 85, 86, 87, 84, 0, 0, 80, 81, 105,
	102, 103, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 74, 92, 94, 96, 97, 98,
	0, 99, 100, 101, 104, 0, 0, 0, 77, 0,
	285, 73, 0, 0, 76, 79, 90, 91, 95, 93,
	89, 88, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 82, 83, 85, 86, 87, 84, 0, 0, 80,
	81, 105, 102, 103, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 74, 92, 94, 96,
	97, 98, 0, 99, 100, 101, 104, 0, 280, 0,
	77, 0, 0, 73, 0, 0, 76, 79, 90, 91,
	95, 93, 89, 88, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 82, 83, 85, 86, 87, 84, 0,
	0, 80, 81, 105, 102, 103, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 74, 92,
	94, 96, 97, 98, 0, 99, 100, 101, 104, 0,
	276, 0, 77, 0, 0, 73, 0, 0, 76, 79,
	90, 91, 95, 93, 89, 88, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 82, 83, 85, 86, 87,
	84, 0, 0, 80, 81, 105, 102, 103, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	74, 92, 94, 96, 97, 98, 0, 99, 100, 101,
	104, 0, 0, 0, 77, 0, 0, 73, 272, 0,
	76, 79, 90, 91, 95, 93, 89, 88, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 82, 83, 85,
	86, 87, 84, 0, 0, 80, 81, 105, 102, 103,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 74, 92, 94, 96, 97, 98, 0, 99,
	100, 101, 104, 0, 263, 0, 77, 0, 0, 73,
	0, 0, 76, 79, 90, 91, 95, 93, 89, 88,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 82,
	83, 85, 86, 87, 84, 0, 0, 80, 81, 105,
	102, 103, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 74, 92, 94, 96, 97, 98,
	0, 99, 100, 101, 104, 0, 0, 0, 77, 247,
	0, 73, 0, 0, 76, 79, 90, 91, 95, 93,
	89, 88, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 82, 83, 85, 86, 87, 84, 0, 0, 80,
	81, 105, 102, 103, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 244, 74, 92, 94, 96,
	97, 98, 0, 99, 100, 101, 104, 0, 0, 0,
	77, 0, 0, 73, 0, 0, 76, 79, 90, 91,
	95, 93, 89, 88, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 82, 83, 85, 86, 87, 84, 0,
	0, 80, 81, 105, 102, 103, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 74, 92,
	94, 96, 97, 98, 0, 99, 100, 101, 104, 0,
	0, 0, 77, 0, 229, 73, 0, 0, 76, 79,
	90, 91, 95, 93, 89, 88, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 82, 83, 85, 86, 87,
	84, 0, 0, 80, 81, 105, 102, 103, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 219,
	74, 92, 94, 96, 97, 98, 0, 99, 100, 101,
	104, 0, 0, 0, 77, 0, 0, 73, 0, 0,
	76, 79, 90, 91, 95, 93, 89, 88, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 82, 83, 85,
	86, 87, 84, 0, 0, 80, 81, 105, 102, 103,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 74, 92, 94, 96, 97, 98, 0, 99,
	100, 101, 104, 0, 0, 0, 77, 195, 0, 73,
	0, 0, 76, 79, 90, 91, 95, 93, 89, 88,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 82,
	83, 85, 86, 87, 84, 0, 0, 80, 81, 105,
	102, 103, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 74, 92, 94, 96, 97, 98,
	0, 99, 100, 101, 104, 0, 187, 0, 77, 0,
	0, 73, 0, 0, 76, 79, 90, 91, 95, 93,
	89, 88, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 82, 83, 85, 86, 87, 84, 0, 0, 80,
	81, 105, 102, 103, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 74, 92, 94, 96,
	97, 98, 0, 99, 100, 101, 104, 0, 178, 0,
	77, 0, 0, 73, 0, 0, 76, 79, 90, 91,
	95, 93, 89, 88, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 82, 83, 85, 86, 87, 84, 0,
	0, 80, 81, 105, 102, 103, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 72, 0, 74, 92,
	94, 96, 97, 98, 0, 99, 100, 101, 104, 0,
	0, 0, 77, 0, 0, 73, 0, 0, 76, 79,
	90, 91, 95, 93, 89, 88, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 82, 83, 85, 86, 87,
	84, 0, 0, 80, 81, 105, 102, 103, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	74, 92, 94, 96, 97, 98, 0, 99, 100, 101,
	104, 0, 0, 0, 77, 0, 0, 73, 0, 0,
	76, 79, 90, 91, 95, 93, 89, 88, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 82, 83, 85,
	86, 87, 84, 0, 0, 80, 81, 105, 102, 103,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 74, 92, 94, 96, 97, 98, 0, 99,
	100, 101, 104, 0, 0, 0, 77, 0, 0, 73,
	0, 0, 209, 79, 90, 91, 95, 93, 89, 88,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 82,
	83, 85, 86, 87, 84, 0, 0, 80, 81, 105,
	102, 103, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 74, 92, 94, 96, 97, 98,
	0, 99, 100, 101, 104, 0, 0, 0, 77, 0,
	0, 73, 0, 0, 208, 79, 90, 91, 95, 93,
	89, 88, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 82, 83, 85, 86, 87, 84, 0, 0, 80,
	81, 105, 102, 103, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 74, 92, 94, 96,
	97, 98, 0, 99, 100, 101, 104, 0, 0, 0,
	144, 0, 0, 73, 0, 0, 76, 33, 43, 44,
	0, 0, 29, 13, 41, 14, 24, 0, 25, 0,
	0, 0, 0, 0, 0, 0, 36, 45, 46, 47,
	0, 15, 18, 0, 0, 0, 0, 0, 0, 0,
	0, 11, 12, 0, 0, 0, 0, 0, 26, 0,
	0, 20, 0, 37, 38, 0, 35, 39, 0, 0,
	0, 0, 0, 0, 51, 0, 53, 55, 0, 0,
	54, 0, 31, 0, 32, 0, 0, 30, 0, 0,
	0, 52, 79, 90, 91, 95, 93, 89, 88, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 81, 105, 102,
	103, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 74, 92, 94, 96, 97, 98, 0,
	99, 100, 101, 104, 0, 0, 0, 77, 0, 0,
	73, 0, 0, 76, 79, 90, 91, 95, 93, 0,
	88, 0, 0, 0, 112, 43, 44, 0, 0, 29,
	0, 41, 0, 0, 0, 0, 0, 0, 80, 81,
	105, 102, 103, 36, 45, 46, 47, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 92, 94, 96, 97,
	98, 0, 99, 100, 101, 104, 0, 0, 0, 77,
	37, 38, 73, 35, 39, 76, 79, 90, 91, 95,
	93, 51, 0, 53, 55, 0, 0, 54, 0, 107,
	0, 32, 0, 110, 30, 0, 0, 0, 52, 0,
	80, 81, 105, 102, 103, 0, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 92, 94,
	96, 97, 98, 0, 99, 100, 101, 104, 33, 43,
	44, 77, 0, 29, 73, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 45, 46,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	33, 43, 44, 0, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 38, 0, 35, 39, 36,
	45, 46, 47, 0, 0, 51, 0, 53, 55, 0,
	0, 54, 0, 31, 0, 32, 0, 0, 30, 292,
	0, 0, 52, 0, 0, 0, 37, 38, 0, 35,
	39, 0, 0, 0, 0, 0, 0, 51, 0, 53,
	55, 0, 0, 54, 0, 31, 0, 32, 0, 0,
	30, 271, 0, 0, 52, 33, 43, 44, 0, 0,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 45, 46, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 33, 43, 44,
	0, 0, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 38, 0, 35, 39, 36, 45, 46, 47,
	0, 0, 51, 0, 53, 55, 0, 0, 54, 0,
	31, 0, 32, 0, 230, 30, 0, 0, 0, 52,
	0, 0, 0, 37, 38, 0, 35, 39, 0, 189,
	0, 0, 0, 0, 51, 0, 53, 55, 0, 0,
	54, 0, 31, 0, 32, 0, 0, 30, 33, 43,
	44, 52, 0, 29, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 45, 46,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	33, 43, 44, 0, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 38, 0, 35, 39, 36,
	45, 46, 47, 0, 0, 51, 0, 53, 55, 0,
	0, 54, 0, 31, 0, 32, 0, 184, 30, 0,
	0, 0, 52, 0, 0, 0, 37, 38, 0, 35,
	39, 0, 147, 0, 0, 0, 0, 51, 0, 53,
	55, 0, 0, 54, 0, 31, 0, 32, 0, 0,
	30, 33, 43, 44, 52, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 45, 46, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 33, 43, 44, 0, 0, 29, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 38, 0,
	35, 39, 36, 45, 46, 47, 0, 0, 51, 0,
	53, 55, 0, 0, 54, 0, 31, 0, 32, 0,
	0, 30, 0, 0, 0, 52, 0, 0, 0, 37,
	38, 0, 35, 39, 0, 0, 0, 0, 0, 0,
	51, 0, 53, 55, 0, 0, 54, 0, 325, 0,
	32, 0, 0, 30, 33, 43, 44, 52, 0, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 36, 45, 46, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 33, 43, 44, 0,
	0, 29, 0, 0, 0, 0, 0, 0, 0, 0,
	37, 38, 0, 35, 39, 36, 45, 46, 47, 0,
	0, 51, 0, 53, 55, 0, 0, 54, 0, 283,
	0, 32, 0, 0, 30, 0, 0, 0, 52, 0,
	0, 0, 37, 38, 0, 35, 39, 0, 0, 0,
	0, 0, 0, 51, 0, 53, 55, 0, 0, 54,
	0, 281, 0, 32, 0, 0, 30, 33, 43, 44,
	52, 0, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 36, 45, 46, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	43, 44, 0, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 38, 0, 35, 39, 36, 45,
	46, 47, 0, 0, 51, 0, 53, 55, 0, 0,
	54, 0, 227, 0, 32, 0, 0, 30, 0, 0,
	0, 52, 0, 0, 0, 37, 38, 0, 35, 39,
	79, 0, 0, 0, 0, 0, 51, 0, 53, 55,
	0, 0, 54, 0, 31, 0, 32, 0, 0, 30,
	0, 0, 0, 52, 80, 81, 105, 102, 103, 0,
	0, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 98, 0, 99, 100,
	101, 104, 0, 0, 0, 77, 0, 0, 73, 0,
	0, 76,
}
var yyPact = [...]int{

	-67, -1000, 2513, -67, -1000, -61, -61, -1000, -1000, -1000,
	-1000, -1000, -1000, 3077, 3077, 252, 228, -1000, 160, -1000,
	3315, 2191, -1000, -1000, 3077, 2660, 3077, 33, -1000, 136,
	-61, -61, 3077, 73, -1000, 80, 79, 76, 3077, 75,
	-1000, 249, 2, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3077, 3077, 3077, 3077, 3077, -1000, -1000, -1000, -1000,
	-1000, 2513, -61, -1000, -54, 2253, 2253, 157, 178, -67,
	74, 2439, 3077, 3006, 3077, 3077, 251, 3077, 3077, 3077,
	-1000, -1000, 3077, 3077, 3077, 3077, 3077, 3077, 3077, 3077,
	3077, 3077, 3077, 3077, 3077, 3077, 3077, 3077, 3077, 3077,
	3077, 3077, 3077, 3077, 3077, 3077, 2129, -67, 42, 641,
	2974, 48, 73, 2067, 2903, 249, 67, 3077, -61, 3077,
	2005, 3077, 3077, 248, -11, 2253, 3077, -8, -1000, 3077,
	-61, -5, -5, -5, 33, 2377, 33, 2315, -1000, -67,
	3077, -67, 145, 3077, 3077, 2253, 579, 3077, 1943, 2576,
	-1000, 121, 2253, 92, 2253, 2253, 2253, 2253, 2253, 2253,
	2700, 2638, 3354, 3354, 3354, 3354, 3354, 3354, 276, 276,
	276, 92, 92, 92, 92, 92, 92, 92, -67, 144,
	-61, 3077, -61, -67, 3283, 1881, 2871, -61, 517, 3077,
	120, 249, -60, -66, 1819, -1000, 102, 1757, -48, -1000,
	248, 60, 246, -10, 455, 3077, -54, 3077, 244, 242,
	142, 1695, 133, 210, 63, 41, 2796, -1000, 1633, 3077,
	65, -1000, 132, -1000, 1571, 240, 130, -67, 1509, 3212,
	3180, 1447, 189, 2764, -1000, 1385, 156, 64, 40, -61,
	-25, -61, -61, 125, 3077, 59, -1000, -1000, 239, -1000,
	5, -45, -40, -53, -1000, -1000, 3077, -54, 2253, 33,
	-1000, -1000, -1000, -67, -1000, 158, 58, -1000, 52, -1000,
	1323, -1000, -1000, 2576, -1000, -1000, -67, -1000, -1000, 119,
	-67, -67, 1261, -67, 1199, 3109, -12, -1000, -1000, 116,
	3077, 1137, -1000, -1000, -67, 155, 153, 50, -61, -1000,
	3077, -1000, 2253, -1000, -1000, -1000, 3077, -1000, -1000, 3077,
	3077, 1075, 113, 152, -67, -1000, -1000, -1000, 111, -1000,
	110, 109, -67, 107, -67, -67, 1013, 103, -1000, -1000,
	-67, 951, -36, -1000, 101, -67, -67, 150, 889, 827,
	393, 765, -1000, -1000, -67, 100, -1000, -1000, -1000, 98,
	-1000, 97, 95, -67, -1000, -1000, -67, -67, -1000, 94,
	90, -67, 3077, -1000, -1000, 3077, -1000, 88, 207, -1000,
	-1000, -1000, 87, -1000, -1000, -1000, -1000, 86, 2253, 703,
	202, 149, -1000, -1000, -1000, 137, -67, -67, 85, 84,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 44, 284, 232, 241, 283, 282, 281, 280, 279,
	278, 2, 1, 31, 0, 277, 9, 276, 8, 275,
	274, 5, 273, 270, 269, 266, 265, 264, 261, 260,
	259, 258, 28, 4, 11, 7,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 5, 6, 6, 7,
	7, 7, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 9, 10, 10, 10, 10, 10, 11,
	11, 12, 19, 19, 19, 15, 15, 15, 16, 16,
	16, 18, 18, 20, 20, 20, 20, 20, 20, 13,
	13, 13, 13, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 21, 17, 17, 17,
	17, 17, 22, 22, 22, 23, 23, 23, 23, 23,
	23, 23, 24, 24, 24, 24, 25, 25, 25, 25,
	25, 25, 25, 25, 26, 26, 27, 27, 27, 27,
	27, 27, 28, 28, 28, 29, 29, 29, 29, 29,
	29, 29, 30, 30, 31, 31, 31, 32, 32, 34,
	34, 35, 33, 33, 33, 33,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 6,
	5, 6, 5, 1, 1, 1, 4, 3, 3, 5,
	7, 5, 4, 7, 5, 6, 7, 7, 8, 7,
	8, 8, 9, 7, 0, 1, 1, 2, 2, 4,
	4, 3, 0, 2, 3, 0, 3, 6, 0, 1,
	4, 1, 3, 6, 5, 5, 6, 5, 5, 0,
	1, 4, 4, 1, 1, 5, 3, 3, 7, 8,
	8, 9, 5, 5, 3, 5, 4, 5, 4, 4,
	4, 1, 4, 4, 5, 7, 5, 7, 9, 7,
	3, 2, 4, 6, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 4,
	2, 4, 1, 1, 1, 1, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 2, 1, 1, 0, 1, 1,
	2, 1, 0, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -30, -2, -31, 73, -34, -35, 79, -3,
	-4, 38, 39, 10, 12, 28, -7, -8, 29, -9,
	48, -14, -5, -6, 13, 15, 45, -21, -17, 9,
	74, 69, 71, 4, -20, 53, 23, 50, 51, 54,
	-22, 11, -13, 5, 6, 24, 25, 26, -23, -24,
	-25, 61, 78, 63, 67, 64, -29, -28, -27, -26,
	-30, -31, -34, -35, -13, -14, -14, 4, 14, 69,
	4, -14, 55, 74, 57, 27, 77, 71, 51, 16,
	40, 41, 32, 33, 37, 34, 35, 36, 22, 21,
	17, 18, 58, 20, 59, 19, 60, 61, 62, 64,
	65, 66, 43, 44, 67, 42, -14, 69, -16, -14,
	73, -4, 4, -14, 74, 71, 4, -32, -34, -32,
	-14, 71, 71, 71, 71, -14, 71, -16, 4, 55,
	76, -14, -14, -14, -21, -14, -21, -14, -3, 69,
	13, 69, -1, 71, 71, -14, -14, 56, -14, -14,
	4, -13, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, 69, -1,
	-34, 16, 76, 69, 73, -14, 73, 69, -14, 56,
	-16, 71, -13, -15, -14, 72, -13, -14, -18, 4,
	49, -19, 52, 74, -14, 55, -13, -32, 77, 77,
	-1, -14, -1, 70, -13, -13, 56, 75, -14, 56,
	8, 72, -1, 70, -14, -32, -1, 69, -14, 73,
	73, -14, -32, 56, 75, -14, 72, 8, -16, 76,
	-33, -34, 76, -33, 56, 8, 72, 72, 77, 72,
	-18, 74, -18, 4, 75, 72, 76, -13, -14, -21,
	4, 4, 70, 69, 70, 30, 8, 72, 8, 72,
	-14, 75, 75, -14, 72, 70, 69, 4, 70, -1,
	69, 69, -14, 69, -14, 73, -10, -12, -11, 47,
	46, -14, 75, 75, 69, 72, 72, 8, -34, 75,
	-32, 70, -14, 72, 4, 72, 76, 75, 72, 76,
	76, -14, -1, 4, 69, 72, 72, 75, -1, 70,
	-1, -1, 69, -1, 69, 69, -14, -32, -11, -12,
	56, -14, -13, 75, -1, 69, 69, 72, -14, -14,
	-14, -14, 72, 70, 69, -1, 70, 70, 70, -1,
	70, -1, -1, 69, 70, -1, 56, 56, 70, -1,
	-1, 69, 56, 72, 72, 76, 72, -1, 70, 70,
	70, 70, -1, -1, -1, 70, 70, -1, -14, -14,
	70, 31, 70, 70, 72, 31, 69, 69, -1, -1,
	70, 70,
}
var yyDef = [...]int{

	152, -2, -2, 152, 153, 156, 155, 159, 161, 3,
	6, 7, 8, 69, 0, 0, 12, 13, 0, 18,
	0, -2, 24, 25, 0, -2, 0, 73, 74, 0,
	157, 157, 0, 106, 91, 0, 0, 0, 0, 0,
	105, 58, 0, 107, 108, 109, 110, 111, 112, 113,
	114, 0, 0, 0, 0, 0, 122, 123, 124, 125,
	2, -2, 154, 160, 9, 70, 10, 0, 0, 152,
	106, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	126, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 70,
	0, 0, -2, 0, 0, 58, 0, 69, 158, 55,
	0, 69, 0, 0, 52, 101, 0, 0, 59, 69,
	157, 115, 116, 117, -2, 0, -2, 0, 4, 152,
	0, 152, 0, 69, 69, 27, 0, 0, 0, 76,
	77, 0, 100, 104, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 0,
	155, 0, 157, 152, 0, 0, 0, 157, 0, 0,
	0, 58, 162, 162, 0, 84, 0, 0, 0, 61,
	0, 0, 0, 0, 0, 69, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 88, 0, 32, 0, 0, 0, 152, 0, 0,
	0, 0, 44, 0, 89, 0, 0, 0, 0, -2,
	0, 164, -2, 0, 0, 0, 86, 92, 0, 93,
	0, 0, 0, 0, 53, 102, 0, 26, 71, -2,
	-2, -2, 11, 152, 31, 0, 0, -2, 0, -2,
	0, 67, 68, 75, 87, 29, 152, 60, 34, 0,
	152, 152, 0, 152, 0, 0, 157, 45, 46, 0,
	69, 0, 64, 65, 152, 0, 0, 0, -2, 82,
	0, 83, 56, 85, 62, 94, 0, 54, 96, 0,
	0, 0, 0, 0, 152, -2, -2, 66, 0, 35,
	0, 0, 152, 0, 152, 152, 0, 0, 47, 48,
	152, 70, 0, 63, 0, 152, 152, 0, 0, 0,
	0, 0, 103, 30, 152, 0, 33, 36, 37, 0,
	39, 0, 0, 152, 43, 51, 152, 152, 78, 0,
	0, 152, 0, 95, 97, 0, 99, 0, 17, 38,
	40, 41, 0, 49, 50, 79, 80, 0, 57, 0,
	16, 0, 42, 81, 98, 0, 152, 152, 0, 0,
	15, 14,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	79, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 66, 67, 3,
	71, 72, 64, 60, 76, 61, 77, 65, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 56, 73,
	58, 55, 59, 57, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 74, 3, 75, 63, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 62, 70,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 68,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:96
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:100
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:106
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:115
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:131
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:135
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:139
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:144
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:149
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:168
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:172
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:227
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:240
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:245
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:259
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:264
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:269
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:284
		{
			yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:289
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:294
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:299
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:304
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:309
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:314
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:319
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:324
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:336
		{
			yyVAL.stmt_switch = &ast.SwitchStmt{Expr: yyDollar[2].expr, Body: yyDollar[5].stmt_switch_cases}
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:351
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:355
		{
			body := yyVAL.stmt_switch_cases.(*ast.SwitchBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_switch_case)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:360
		{
			body := yyVAL.stmt_switch_cases.(*ast.SwitchBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_switch_default
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:370
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:375
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:382
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:387
		{
			yyVAL.array_count = ast.ArrayCount{Count: 0}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:391
		{
			yyVAL.array_count = ast.ArrayCount{Count: 1}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.array_count.Count = yyVAL.array_count.Count + 1
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:400
		{
			yyVAL.map_expr = make(map[ast.Expr]ast.Expr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:404
		{
			mapExpr := make(map[ast.Expr]ast.Expr)
			mapExpr[yyDollar[1].expr] = yyDollar[3].expr
			yyVAL.map_expr = mapExpr
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:410
		{
			if len(yyDollar[1].map_expr) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[1].map_expr[yyDollar[4].expr] = yyDollar[6].expr
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:418
		{
			yyVAL.expr_idents = []string{}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:422
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:426
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:435
		{
			yyVAL.expr_type = yyDollar[1].tok.Lit
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:439
		{
			yyVAL.expr_type = yyVAL.expr_type + "." + yyDollar[3].tok.Lit
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:445
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:449
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:453
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:457
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:461
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:465
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:471
		{
			yyVAL.exprs = nil
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:475
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:479
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:486
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:495
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:499
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:503
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:508
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:513
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 78:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:518
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 79:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:523
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:528
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:533
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:543
		{
			yyVAL.expr = &ast.MapExpr{MapExpr: yyDollar[3].map_expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:548
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:553
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:563
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:573
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:583
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:588
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:593
		{
			yyVAL.expr = &ast.NewExpr{Type: yyDollar[3].expr_type}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:598
		{
			yyVAL.expr = &ast.MakeChanExpr{Type: yyDollar[4].expr_type, SizeExpr: nil}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:603
		{
			yyVAL.expr = &ast.MakeChanExpr{Type: yyDollar[4].expr_type, SizeExpr: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:608
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:613
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type, LenExpr: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type, LenExpr: yyDollar[6].expr, CapExpr: yyDollar[8].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:623
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:628
		{
			yyVAL.expr = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:633
		{
			yyVAL.expr = &ast.ChanExpr{RHS: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:643
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:648
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:656
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:663
		{
			num, err := toNumber(yyDollar[1].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: " + yyDollar[1].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:672
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:677
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:682
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:699
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:704
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:709
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:714
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:719
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:724
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:729
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:736
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:741
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:746
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:751
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:758
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:766
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:774
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:782
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:790
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:798
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:806
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:814
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:824
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:829
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:836
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:841
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:846
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:851
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:856
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:861
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:868
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:873
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:878
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:885
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:890
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:895
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:900
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:905
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:910
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:915
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "**", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
