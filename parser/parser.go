// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:1

package parser

import __yyfmt__ "fmt"

//line parser.go.y:3

import (
	"github.com/mattn/anko/ast"
)

//line parser.go.y:48
type yySymType struct {
	yys int
	tok ast.Token

	compstmt            ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt
	stmt_select         ast.Stmt
	stmt_select_cases   ast.Stmt
	stmt_select_case    ast.Stmt
	stmt_select_default ast.Stmt

	exprs                []ast.Expr
	expr                 ast.Expr
	expr_idents          []string
	type_data            *ast.TypeStruct
	slice_count          int
	expr_member_or_ident ast.Expr
	expr_member          *ast.MemberExpr
	expr_ident           *ast.IdentExpr
	expr_literals        ast.Expr
	expr_map             *ast.MapExpr
	expr_slice           ast.Expr
	expr_chan            ast.Expr
	expr_unary           ast.Expr
	expr_binary          ast.Expr
	expr_lets            ast.Expr

	op_binary     ast.Operator
	op_comparison ast.Operator
	op_add        ast.Operator
	op_multiply   ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const SHIFTLEFT = 57384
const SHIFTRIGHT = 57385
const SWITCH = 57386
const SELECT = 57387
const CASE = 57388
const DEFAULT = 57389
const GO = 57390
const CHAN = 57391
const MAKE = 57392
const OPCHAN = 57393
const EQOPCHAN = 57394
const TYPE = 57395
const LEN = 57396
const DELETE = 57397
const CLOSE = 57398
const MAP = 57399
const IMPORT = 57400
const UNARY = 57401

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"EQOPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"IMPORT",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"','",
	"';'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1132

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	52, 67,
	59, 67,
	77, 67,
	78, 5,
	-2, 1,
	-1, 24,
	77, 68,
	-2, 27,
	-1, 28,
	16, 104,
	-2, 67,
	-1, 69,
	52, 67,
	59, 67,
	77, 67,
	-2, 5,
	-1, 122,
	16, 105,
	77, 105,
	-2, 118,
	-1, 127,
	4, 113,
	49, 113,
	57, 113,
	-2, 79,
	-1, 268,
	60, 5,
	-2, 67,
	-1, 272,
	74, 187,
	80, 187,
	-2, 179,
	-1, 291,
	74, 187,
	-2, 179,
	-1, 295,
	1, 70,
	8, 70,
	46, 70,
	47, 70,
	52, 70,
	59, 70,
	60, 70,
	74, 70,
	76, 70,
	77, 70,
	78, 70,
	80, 70,
	83, 70,
	-2, 116,
	-1, 299,
	1, 17,
	46, 17,
	47, 17,
	60, 17,
	74, 17,
	78, 17,
	83, 17,
	-2, 84,
	-1, 301,
	1, 19,
	46, 19,
	47, 19,
	60, 19,
	74, 19,
	78, 19,
	83, 19,
	-2, 86,
	-1, 330,
	46, 57,
	47, 57,
	74, 57,
	-2, 174,
	-1, 336,
	74, 185,
	80, 185,
	-2, 180,
	-1, 353,
	1, 16,
	46, 16,
	47, 16,
	60, 16,
	74, 16,
	78, 16,
	83, 16,
	-2, 83,
	-1, 354,
	1, 18,
	46, 18,
	47, 18,
	60, 18,
	74, 18,
	78, 18,
	83, 18,
	-2, 85,
}

const yyPrivate = 57344

const yyLast = 3862

var yyAct = [...]int{

	73, 273, 232, 24, 38, 145, 323, 324, 9, 5,
	265, 266, 326, 325, 8, 74, 291, 118, 78, 7,
	268, 267, 8, 8, 127, 272, 71, 8, 116, 119,
	123, 8, 216, 286, 287, 390, 285, 137, 216, 51,
	128, 216, 86, 216, 215, 1, 87, 139, 89, 8,
	337, 35, 216, 72, 152, 339, 216, 8, 289, 216,
	153, 154, 155, 156, 157, 221, 335, 136, 146, 219,
	24, 144, 131, 208, 150, 346, 408, 381, 158, 354,
	163, 164, 353, 167, 168, 169, 170, 133, 172, 174,
	71, 176, 300, 150, 177, 178, 179, 180, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 135, 340, 234,
	203, 207, 160, 333, 306, 134, 171, 88, 212, 298,
	210, 278, 149, 449, 334, 204, 132, 204, 6, 148,
	224, 226, 227, 211, 70, 270, 233, 136, 248, 71,
	236, 91, 92, 138, 126, 448, 237, 150, 161, 444,
	301, 150, 130, 201, 143, 142, 245, 141, 214, 140,
	80, 79, 440, 129, 252, 131, 439, 437, 223, 213,
	431, 204, 430, 129, 133, 133, 86, 133, 235, 426,
	87, 425, 89, 424, 133, 133, 133, 299, 150, 279,
	150, 240, 241, 422, 255, 238, 414, 259, 410, 262,
	256, 351, 246, 269, 204, 263, 249, 150, 405, 401,
	135, 275, 71, 399, 230, 125, 282, 398, 134, 397,
	271, 394, 375, 361, 290, 348, 314, 311, 294, 132,
	304, 296, 295, 254, 302, 445, 253, 239, 305, 165,
	136, 257, 307, 443, 413, 392, 202, 380, 379, 332,
	159, 318, 320, 129, 124, 76, 377, 81, 372, 24,
	327, 133, 330, 213, 293, 329, 328, 331, 237, 442,
	352, 438, 341, 326, 325, 268, 267, 297, 345, 129,
	10, 313, 288, 350, 71, 217, 218, 349, 220, 276,
	147, 175, 75, 64, 315, 228, 229, 231, 4, 166,
	2, 359, 69, 65, 68, 338, 66, 67, 49, 121,
	48, 47, 368, 46, 45, 32, 52, 373, 369, 371,
	370, 31, 264, 23, 322, 22, 21, 20, 26, 25,
	382, 133, 3, 129, 0, 386, 0, 389, 129, 356,
	391, 0, 0, 274, 129, 0, 71, 0, 360, 395,
	0, 0, 362, 363, 0, 365, 374, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 376, 0, 378, 0,
	88, 0, 277, 0, 0, 0, 415, 0, 0, 417,
	0, 133, 0, 0, 0, 0, 419, 202, 393, 0,
	0, 0, 0, 129, 91, 92, 102, 103, 0, 0,
	400, 336, 402, 403, 0, 0, 0, 0, 406, 0,
	233, 436, 435, 409, 0, 411, 412, 0, 0, 0,
	336, 0, 99, 100, 101, 104, 0, 441, 421, 86,
	0, 0, 0, 87, 0, 89, 0, 0, 0, 0,
	427, 0, 347, 428, 429, 0, 202, 0, 202, 432,
	0, 129, 0, 37, 54, 55, 0, 0, 33, 13,
	50, 14, 27, 0, 28, 0, 0, 274, 0, 0,
	0, 0, 41, 56, 57, 58, 0, 15, 16, 446,
	0, 447, 0, 0, 0, 0, 0, 11, 12, 0,
	0, 0, 383, 29, 30, 0, 202, 17, 0, 42,
	59, 0, 0, 39, 18, 19, 43, 40, 0, 0,
	0, 0, 0, 0, 53, 0, 61, 63, 0, 129,
	62, 0, 44, 0, 36, 0, 0, 0, 34, 0,
	0, 60, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 274, 0, 0, 90, 83, 0,
	0, 0, 0, 0, 0, 82, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 205,
	0, 86, 0, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 387, 388,
	0, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 385, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 0, 0, 0, 87, 384, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 358, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	0, 0, 0, 87, 357, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	344, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 0, 0, 0, 87,
	343, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 0,
	0, 86, 0, 0, 0, 87, 309, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 0, 0,
	0, 87, 280, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 0, 0, 0, 87, 250, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	242, 243, 0, 87, 0, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 90, 83, 0, 0, 0, 0, 0, 0, 82,
	0, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 0, 0, 0, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 0,
	0, 86, 434, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 0, 0,
	0, 87, 433, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 0, 0, 0, 87, 423, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 420, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	0, 0, 0, 87, 0, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 418, 0, 0, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 0,
	0, 86, 0, 0, 0, 87, 416, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 407, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 0, 0,
	0, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 404, 0, 86, 0, 0, 0, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	0, 0, 0, 87, 396, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 366, 0, 86, 0, 0, 0, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 364,
	0, 86, 0, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 355, 0,
	0, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 0, 0, 321, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 316, 0, 86,
	0, 0, 0, 87, 0, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 312, 0, 86, 0, 0, 0, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 303,
	0, 86, 0, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 0, 0,
	0, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 284, 0, 0, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	283, 0, 0, 87, 0, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 0, 0, 260, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 247, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 0,
	0, 86, 0, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 244, 0,
	0, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 222, 0, 0, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 209, 0, 86,
	0, 0, 0, 87, 0, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 200, 0, 86, 0, 0, 0, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 0,
	0, 86, 0, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 162, 0, 0,
	0, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 0, 0, 0, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 122, 54, 55, 0, 0, 33,
	0, 50, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 41, 56, 57, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	42, 59, 0, 87, 39, 89, 0, 43, 40, 0,
	0, 0, 0, 0, 0, 53, 0, 61, 63, 0,
	0, 62, 0, 117, 0, 36, 0, 0, 120, 34,
	0, 0, 60, 37, 54, 55, 0, 0, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 56, 57, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	54, 55, 0, 0, 33, 0, 0, 0, 0, 42,
	59, 0, 0, 39, 0, 0, 43, 40, 41, 56,
	57, 58, 0, 0, 53, 0, 61, 63, 0, 0,
	62, 0, 44, 0, 36, 37, 54, 55, 34, 342,
	33, 60, 0, 0, 0, 42, 59, 0, 0, 39,
	0, 0, 43, 40, 41, 56, 57, 58, 0, 0,
	53, 0, 61, 63, 0, 0, 62, 0, 44, 0,
	36, 37, 54, 55, 34, 308, 33, 60, 0, 0,
	0, 42, 59, 0, 0, 39, 0, 0, 43, 40,
	41, 56, 57, 58, 0, 0, 53, 0, 61, 63,
	0, 0, 62, 0, 44, 0, 36, 0, 0, 261,
	34, 0, 0, 60, 0, 0, 0, 42, 59, 0,
	0, 39, 0, 0, 43, 40, 0, 225, 0, 0,
	0, 0, 53, 0, 61, 63, 0, 0, 62, 0,
	44, 0, 36, 37, 54, 55, 34, 0, 33, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 56, 57, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	54, 55, 0, 0, 33, 0, 0, 0, 0, 42,
	59, 0, 0, 39, 0, 0, 43, 40, 41, 56,
	57, 58, 0, 0, 53, 0, 61, 63, 0, 0,
	62, 0, 44, 0, 36, 0, 0, 206, 34, 0,
	0, 60, 0, 0, 0, 42, 59, 0, 0, 39,
	0, 0, 43, 40, 0, 173, 0, 0, 0, 0,
	53, 0, 61, 63, 0, 0, 62, 0, 44, 0,
	36, 37, 54, 55, 34, 0, 33, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 56, 57, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 54, 55,
	0, 0, 33, 0, 0, 0, 0, 42, 59, 0,
	0, 39, 0, 0, 43, 40, 41, 56, 57, 58,
	0, 0, 53, 0, 61, 63, 0, 0, 62, 0,
	44, 0, 36, 37, 54, 55, 34, 0, 33, 60,
	0, 0, 0, 42, 59, 0, 0, 39, 0, 0,
	43, 40, 41, 56, 57, 58, 0, 0, 53, 0,
	61, 63, 0, 0, 62, 0, 367, 0, 36, 37,
	54, 55, 34, 0, 33, 60, 0, 0, 0, 42,
	59, 0, 0, 39, 0, 0, 43, 40, 41, 56,
	57, 58, 0, 0, 53, 0, 61, 63, 0, 0,
	62, 0, 319, 0, 36, 37, 54, 55, 34, 0,
	33, 60, 0, 0, 0, 42, 59, 0, 0, 39,
	0, 0, 43, 40, 41, 56, 57, 58, 0, 0,
	53, 0, 61, 63, 0, 0, 62, 0, 317, 0,
	36, 0, 0, 0, 34, 0, 0, 60, 0, 0,
	0, 42, 59, 0, 0, 39, 0, 0, 43, 40,
	0, 88, 108, 109, 113, 111, 53, 114, 61, 63,
	0, 0, 62, 0, 258, 0, 36, 0, 0, 0,
	34, 0, 0, 60, 0, 91, 92, 102, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 112, 105,
	106, 107, 0, 99, 100, 101, 104, 37, 151, 55,
	86, 0, 33, 0, 87, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 56, 57, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 54, 55, 0, 0, 33, 0,
	0, 0, 0, 42, 59, 0, 0, 39, 0, 0,
	43, 40, 41, 56, 57, 58, 0, 0, 53, 0,
	61, 63, 0, 0, 62, 0, 44, 0, 36, 0,
	0, 0, 34, 0, 0, 60, 0, 0, 0, 42,
	59, 0, 0, 39, 0, 0, 43, 40, 88, 108,
	109, 113, 111, 0, 53, 0, 61, 63, 0, 0,
	62, 0, 44, 0, 36, 0, 88, 0, 34, 0,
	0, 60, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 102, 103, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 0, 0,
	0, 87, 0, 89, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 0, 0, 0, 87,
	0, 89,
}
var yyPact = [...]int{

	-69, -1000, 459, -69, -1000, -60, -60, -1000, -1000, -1000,
	-1000, -1000, -1000, 3427, 3427, 298, 192, 3719, 96, 95,
	253, -1000, -1000, -1000, 1120, -1000, -1000, 3427, 3060, 3427,
	191, -1000, -1000, 150, -56, 68, 3427, 78, -32, 94,
	92, 90, 89, -8, -60, -1000, -1000, -1000, -1000, -1000,
	296, 80, -1000, 3683, -1000, -1000, -1000, -1000, -1000, 3427,
	3427, 3427, 3427, 3427, -1000, -1000, -1000, -1000, -1000, 459,
	-60, -1000, -3, 2836, 2836, 187, -69, 83, 2902, 3427,
	3427, 236, 3427, 3427, 3427, 3427, 3427, 3355, 3427, 297,
	3427, -1000, -1000, 3427, 3427, 3427, 3427, 3427, 3427, 3427,
	3427, 3427, 3427, 3427, 3427, 3427, 3427, 3427, 3427, 3427,
	3427, 3427, 3427, 3427, 3427, 3427, 2770, -69, 104, 526,
	3319, -5, 78, 2704, -60, 296, 53, -12, 3427, -60,
	-29, -1000, 68, 68, -10, 68, -15, 2638, 3427, 3247,
	3427, 3427, 68, 171, 68, 3427, 60, -1000, 3427, 3427,
	-60, -1000, -33, 2968, -33, -33, -33, -33, -1000, -69,
	173, 3427, 3427, 1054, 2572, 3427, -69, 2836, 2836, 2506,
	3034, 140, 988, 3427, 111, -1000, 2968, 2836, 2836, 2836,
	2836, 2836, 2836, 111, 111, 111, 111, 111, 111, 364,
	364, 364, 3780, 3780, 3780, 3780, 3780, 3780, 3762, 3615,
	-69, 169, -60, 3427, -60, -69, 3571, 2440, 3211, -60,
	239, 137, 296, -1000, -52, -60, 295, -49, -49, 68,
	-49, -12, -1000, 123, 922, 3427, 2374, 2308, -40, -43,
	288, -22, -61, 2242, 3427, -3, 2836, 3427, 167, 257,
	121, 84, -1000, 3427, -1000, 2176, 166, 3427, 48, -1000,
	-1000, 3175, 856, 163, -1000, 2110, 287, 162, -69, 2044,
	3535, 3499, 1978, 237, -26, -1000, -1000, 212, 459, 186,
	47, 58, -60, -30, -60, 3427, -1000, -25, 42, -1000,
	-1000, 3139, 790, -1000, -1000, -1000, -1000, 3427, -2, 68,
	161, -60, 3427, -3, 2836, -32, -1000, 207, 6, -1000,
	3, -1000, 1912, -69, -1000, 2968, -1000, 724, -1000, -1000,
	3427, -1000, -69, -1000, -1000, 159, -69, -69, 1846, -69,
	1780, 3463, -34, -1000, -1000, 208, 3427, 158, -1000, -1000,
	-69, 206, -69, 185, 184, 1, -60, -1000, -52, 68,
	-1000, 658, -1000, -1000, 3427, 592, 3427, -38, -1000, 3427,
	2836, 182, -69, -1000, -1000, -1000, 157, -1000, 3427, 1714,
	155, -1000, 153, 149, -69, 145, -69, -69, 1648, 144,
	-1000, -1000, -69, 1582, 16, -1000, -1000, -69, 134, -69,
	-69, 181, 132, -49, -1000, 3427, 1516, -1000, 3427, 1450,
	-60, 1384, -69, 129, -1000, 1318, -1000, -1000, -1000, -1000,
	119, -1000, 117, 115, -69, -1000, -1000, -69, -69, -1000,
	-1000, 108, 106, -69, -1000, 1252, -1000, 1186, -1000, 3427,
	3427, 103, 250, -1000, -1000, -1000, -1000, 102, -1000, -1000,
	-1000, -1000, 98, -1000, -1000, -61, 2836, 248, 180, -1000,
	-1000, 85, 172, -69, -1000, -69, 81, 59, -1000, -1000,
}
var yyPgo = [...]int{

	0, 45, 342, 8, 290, 339, 338, 337, 336, 335,
	334, 7, 6, 333, 332, 11, 10, 39, 0, 17,
	162, 51, 331, 326, 4, 325, 2, 324, 323, 321,
	320, 318, 317, 316, 313, 303, 310, 308, 5, 1,
	138, 19,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	5, 6, 6, 6, 6, 7, 7, 7, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 13,
	14, 14, 14, 14, 14, 15, 16, 16, 9, 10,
	10, 10, 10, 10, 11, 11, 12, 17, 17, 17,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 19, 19, 19, 20, 20, 20,
	20, 20, 20, 21, 21, 22, 22, 23, 24, 25,
	25, 25, 25, 25, 25, 26, 26, 26, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 28, 28,
	29, 29, 29, 29, 29, 30, 30, 30, 30, 31,
	31, 31, 31, 31, 31, 31, 31, 35, 35, 35,
	35, 35, 35, 34, 34, 34, 33, 33, 33, 33,
	33, 33, 32, 32, 36, 36, 37, 37, 37, 38,
	38, 40, 40, 41, 39, 39, 39, 39,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 13, 12, 9, 8, 6, 5, 6, 5,
	4, 6, 4, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 3, 3, 3, 5, 7, 5, 4, 7,
	5, 6, 7, 7, 8, 7, 8, 8, 9, 6,
	0, 1, 1, 2, 2, 4, 3, 2, 7, 0,
	1, 1, 2, 2, 4, 4, 3, 0, 1, 4,
	4, 1, 1, 5, 3, 7, 8, 8, 9, 2,
	5, 7, 3, 5, 4, 5, 4, 4, 4, 4,
	4, 4, 4, 6, 8, 7, 3, 10, 5, 1,
	1, 1, 1, 1, 0, 1, 4, 1, 3, 2,
	2, 5, 2, 2, 3, 1, 1, 3, 1, 2,
	1, 1, 1, 1, 1, 0, 3, 6, 6, 5,
	5, 7, 8, 6, 5, 5, 7, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 2, 1, 1, 0,
	1, 1, 2, 1, 0, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -36, -2, -37, 78, -40, -41, 83, -3,
	-4, 38, 39, 10, 12, 28, 29, 48, 55, 56,
	-7, -8, -9, -13, -18, -5, -6, 13, 15, 44,
	45, -22, -25, 9, 79, -21, 75, 4, -24, 54,
	58, 23, 50, 57, 73, -27, -28, -29, -30, -31,
	11, -17, -23, 65, 5, 6, 24, 25, 26, 51,
	82, 67, 71, 68, -35, -34, -33, -32, -36, -37,
	-40, -41, -17, -18, -18, 4, 73, 4, -18, 75,
	75, 14, 59, 52, 61, 27, 75, 79, 16, 81,
	51, 40, 41, 32, 33, 37, 34, 35, 36, 68,
	69, 70, 42, 43, 71, 64, 65, 66, 17, 18,
	62, 20, 63, 19, 22, 21, -18, 73, -19, -18,
	78, -4, 4, -18, 73, 75, 4, 80, -38, -40,
	-20, 4, 68, -21, 57, 49, 79, -18, 75, 79,
	75, 75, 75, 75, 79, -38, -19, 4, 59, 52,
	77, 5, -18, -18, -18, -18, -18, -18, -3, 73,
	-1, 75, 75, -18, -18, 13, 73, -18, -18, -18,
	-18, -17, -18, 60, -18, 4, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	73, -1, -40, 16, 77, 73, 78, -18, 78, 73,
	-38, -19, 75, -21, -17, 73, 81, -20, -20, 79,
	-20, 80, 76, -17, -18, 60, -18, -18, -20, -20,
	53, -20, -26, -18, 59, -17, -18, -38, -1, 74,
	-17, -17, 76, 77, 76, -18, -1, 60, 8, 76,
	80, 60, -18, -1, 74, -18, -38, -1, 73, -18,
	78, 78, -18, -38, -14, -16, -15, 47, 46, 76,
	8, -19, 77, -39, -40, -38, 4, -20, 8, 76,
	80, 60, -18, 76, 76, 76, 76, 77, 4, 80,
	-39, 77, 60, -17, -18, -24, 74, 30, 8, 76,
	8, 76, -18, 73, 74, -18, 76, -18, 80, 80,
	60, 74, 73, 4, 74, -1, 73, 73, -18, 73,
	-18, 78, -10, -12, -11, 47, 46, -38, -15, -16,
	60, -3, 73, 76, 76, 8, -40, 80, -17, 80,
	76, -18, 80, 80, 60, -18, 77, -20, 74, -38,
	-18, 4, 73, 76, 76, 76, -1, 80, 60, -18,
	-1, 74, -1, -1, 73, -1, 73, 73, -18, -38,
	-11, -12, 60, -18, -17, 74, -1, 60, -1, 73,
	73, 76, -39, -20, 80, 60, -18, 76, 77, -18,
	73, -18, 73, -1, 74, -18, 80, 74, 74, 74,
	-1, 74, -1, -1, 73, 74, -1, 60, 60, -1,
	74, -1, -1, 73, 74, -18, 80, -18, 76, -38,
	60, -1, 74, 80, 74, 74, 74, -1, -1, -1,
	74, 74, -1, 80, 76, -26, -18, 74, 31, 74,
	74, -39, 31, 73, 74, 73, -1, -1, 74, 74,
}
var yyDef = [...]int{

	174, -2, -2, 174, 175, 178, 177, 181, 183, 3,
	6, 7, 8, 67, 0, 0, 0, 0, 0, 0,
	23, 24, 25, 26, -2, 28, 29, 0, -2, 0,
	0, 71, 72, 0, 179, 0, 0, 118, 116, 0,
	0, 0, 0, 0, 179, 99, 100, 101, 102, 103,
	104, 0, 115, 0, 120, 121, 122, 123, 124, 0,
	0, 0, 0, 0, 145, 146, 147, 148, 2, -2,
	176, 182, 9, 68, 10, 0, 174, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	0, 149, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 68,
	0, 0, -2, 0, 179, 104, 0, -2, 67, 180,
	0, 107, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 0, 0, 0, 125, 0, 105, 67, 0,
	179, 119, 140, 139, 141, 142, 143, 144, 4, 174,
	0, 67, 67, 0, 0, 0, 174, 31, 33, 0,
	74, 0, 0, 0, 96, 117, 138, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
	174, 0, 177, 0, 179, 174, 0, 0, 0, 179,
	50, 0, 104, 114, 184, 179, 0, 109, 110, 0,
	112, 113, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 67, 32, 34, 0, 0, 0,
	0, 0, 20, 0, 22, 0, 0, 0, 0, 86,
	88, 0, 0, 0, 38, 0, 0, 0, 174, 0,
	0, 0, 0, 59, 179, 51, 52, 0, -2, 0,
	0, 0, -2, 0, 186, 67, 108, 0, 0, 84,
	87, 0, 0, 89, 90, 91, 92, 0, 0, 0,
	0, -2, 0, 30, 69, -2, 11, 0, 0, -2,
	0, -2, 0, 174, 37, 73, 85, 0, 134, 135,
	0, 35, 174, 106, 40, 0, 174, 174, 0, 174,
	0, 0, 179, 60, 61, 0, 67, 0, 53, 54,
	-2, 0, 174, 0, 0, 0, -2, 80, 184, 0,
	83, 0, 129, 130, 0, 0, 0, 0, 98, 0,
	126, 0, 174, -2, -2, 21, 0, 133, 0, 0,
	0, 41, 0, 0, 174, 0, 174, 174, 0, 0,
	62, 63, 174, 68, 0, 49, 56, 174, 0, 174,
	174, 0, 0, 111, 128, 0, 0, 93, 0, 0,
	179, 0, 174, 0, 36, 0, 136, 39, 42, 43,
	0, 45, 0, 0, 174, 58, 66, 174, 174, 55,
	75, 0, 0, 174, 81, 0, 131, 0, 95, 125,
	0, 0, 15, 137, 44, 46, 47, 0, 64, 65,
	76, 77, 0, 132, 94, 184, 127, 14, 0, 48,
	78, 0, 0, 174, 97, 174, 0, 0, 13, 12,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	83, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 70, 71, 3,
	75, 76, 68, 64, 77, 65, 81, 69, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 60, 78,
	62, 59, 63, 61, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 79, 3, 80, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 66, 74,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 72,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:114
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:118
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:124
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:133
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:149
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:153
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:157
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:172
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 14:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:212
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:217
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:222
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:227
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:232
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:237
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:253
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:260
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:264
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:282
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:294
		{
			yyVAL.stmt_lets = &ast.ChanStmt{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:299
		{
			if len(yyDollar[1].exprs) == 2 {
				chanStmt := &ast.ChanStmt{LHS: yyDollar[1].exprs[0].(ast.Expr), OkExpr: yyDollar[1].exprs[1].(ast.Expr), RHS: yyDollar[3].expr}
				yyVAL.stmt_lets = chanStmt
				yyVAL.stmt_lets.SetPosition(chanStmt.LHS.Position())
			} else if len(yyDollar[1].exprs) < 2 {
				yylex.Error("missing expressions on left side of channel operator")
				yyVAL.stmt_lets = &ast.ChanStmt{RHS: yyDollar[3].expr}
				yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:313
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:318
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:323
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:333
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:338
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:384
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:389
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:396
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:407
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:411
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:415
		{
			selectStmt := yyDollar[1].stmt_select_cases.(*ast.SelectBodyStmt)
			selectStmt.Cases = append(selectStmt.Cases, yyDollar[2].stmt_select_case)
			yyVAL.stmt_select_cases = selectStmt
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:421
		{
			selectStmt := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if selectStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			selectStmt.Default = yyDollar[2].stmt_select_default
			yyVAL.stmt_select_cases = selectStmt
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:432
		{
			if yyDollar[2].stmt == nil {
				yylex.Error("syntax error: unexpected ':'")
			}
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:442
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:446
		{
			yyVAL.stmt_select_default = &ast.SelectCaseStmt{}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:452
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:461
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:465
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:469
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:473
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:479
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:489
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:494
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:501
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:508
		{
			yyVAL.exprs = nil
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:512
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:516
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:523
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:532
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:536
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:540
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:545
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 76:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:555
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 77:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:560
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 78:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:565
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:575
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:585
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:590
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:595
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:600
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:605
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:610
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:615
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:625
		{
			yyVAL.expr = &ast.ImportExpr{Name: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:630
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:640
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 93:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:645
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:665
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:671
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:676
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:681
		{
			yyVAL.expr = yyDollar[1].expr_chan
			yyVAL.expr.SetPosition(yyDollar[1].expr_chan.Position())
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:690
		{
			yyVAL.expr_idents = []string{}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:694
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:698
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:707
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:711
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:720
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:729
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:739
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:743
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:755
		{
			yyVAL.slice_count = 1
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:759
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:765
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_member
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:769
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:775
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:782
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:789
		{
			num, err := toNumber("-" + yyDollar[2].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: -" + yyDollar[2].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[2].tok.Position())
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:798
		{
			num, err := toNumber(yyDollar[1].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: " + yyDollar[1].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:807
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:812
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:817
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:822
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:829
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:833
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:837
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:847
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:851
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:855
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 131:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:859
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 132:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:863
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:867
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:871
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:875
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:879
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 137:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:883
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:889
		{
			yyVAL.expr_chan = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:893
		{
			yyVAL.expr_chan = &ast.ChanExpr{RHS: yyDollar[2].expr}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:899
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:904
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:909
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:914
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:919
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:926
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:931
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:936
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:941
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:948
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:956
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:964
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:972
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:980
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:988
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:996
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1004
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1015
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1020
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1025
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1030
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1035
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1040
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1047
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1052
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1057
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1064
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1069
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1074
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1079
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1084
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1089
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1096
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1101
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
